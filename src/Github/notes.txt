runsR <- runFwk $ buildListRunsReq [perPage 3, branch "matto/rul-88"]
runsResp <- runFwk $ runTypedRequest runsR
runsList = getResponseBody runsResp
runs = lrWorkflowRuns runsList
failed = runs !! 2
jobsR <- runFwk $ buildRunJobsRequest failed []
jobsResp <- runTypedRequest jobsR
jobs = ljJobs $ getResponseBody jobsResp
failedJ = Prelude.filter (\j -> (jpConclusion j /= Success)) jobs
failedBuild = Prelude.head failedJ
logsReq <- runFwk $ buildJobLogsRequest failedBuild
logsResp <- httpBS logsReq
logsBody = getResponseBody logsResp
logsText = decodeUtf8 logsBody
logsLines = Data.Text.lines logsText

^^ old

runs <- runFwk $ listRuns 1 "matto/rul-80"
lFail <- runFwk $ failedLatest runs
jobs <- runFwk $ listJobs lFail
failedJobs <- runFwk $ failedJobs jobs
let first = NEL.head failedJobs
rawLogs <- runFwk $ rawLogsFor first